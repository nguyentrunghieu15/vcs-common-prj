syntax = "proto3";

option go_package = "github.com/nguyentrunghieu15/vcs-common-prj/apu/user";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";
import "apu/server/server.proto";
import "validate/validate.proto";


enum UserRole {
    RoleNone = 0;
    RoleAdmin = 1;
    RoleUser = 2;
}

message User {
  int64 id = 1;
  string created_at = 2;
  int64 created_by = 3;
  string updated_at = 4; 
  int64 updated_by =5;
  string email = 6 [(google.api.field_behavior) = REQUIRED, (validate.rules).string = {email: true}];
  string full_name = 7;
  string phone = 8;
  string avatar = 9;
  bool is_supper_admin =10;
  UserRole roles = 11 [(google.api.field_behavior) = REQUIRED, (validate.rules).enum.defined_only = true];
}

message ListUsersRequest {
    optional Filter filter = 1;
}

message ListUsersResponse {
    repeated User users = 1;
}

message GetUserByIdRequest {
    int64 id = 1;
}

message GetUserByEmailRequest {
  string email = 1;
}

message DeleteUserByIdRequest {
    int64 id = 1;
}

message CreateUserRequest {
  string email = 1 [(google.api.field_behavior) = REQUIRED, (validate.rules).string = {email: true}];
  string full_name = 2;
  string phone = 3;
  string avatar = 4;
  bool is_supper_admin =5;
  UserRole roles = 6 [(google.api.field_behavior) = REQUIRED, (validate.rules).enum.defined_only = true];
  string password = 7 [(google.api.field_behavior) = REQUIRED, (validate.rules).string = {min_len: 6}];
}

message UpdateUserByIdRequest {
  string email = 1 [(google.api.field_behavior) = REQUIRED, (validate.rules).string = {email: true}];
  string full_name = 2;
  string phone = 3;
  string avatar = 4;
  bool is_supper_admin =5;
  UserRole roles = 6 [(google.api.field_behavior) = REQUIRED, (validate.rules).enum.defined_only = true];
  int64 id = 8;
}

message ChangePasswordRequest {
  string email = 1 [(google.api.field_behavior) = REQUIRED, (validate.rules).string = {email: true}];
  string password = 7 [(google.api.field_behavior) = REQUIRED, (validate.rules).string = {min_len: 6}];
}


// Generated according to https://cloud.google.com/apis/design/standard_methods
service UserService {
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/user"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Get list user"
      responses:[
         {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc GetUser(GetUserByIdRequest) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Get user by id"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc GetUserByEmail(GetUserByEmailRequest) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/user/email/{email}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Get user by email"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/api/v1/user"
      body:"*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Create user"
      responses:[
         {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "409",
          value: {
            description: "Already exists";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc UpdateUser(UpdateUserByIdRequest) returns (User) {
    option (google.api.http) = {
      patch: "/api/v1/user/{id}"
      body:"*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Update user"
      responses: [
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc ChangePasswordUser(ChangePasswordRequest) returns (User) {
    option (google.api.http) = {
      patch: "/api/v1/user/password/change"
      body:"*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Change password"
      responses: [
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc DeleteUser(DeleteUserByIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Delete user"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }
}
