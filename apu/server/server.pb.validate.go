// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: apu/server/server.proto

package server

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Limit != nil {

		if m.GetLimit() != 0 {

			if m.GetLimit() < 1 {
				err := PaginationValidationError{
					field:  "Limit",
					reason: "value must be greater than or equal to 1",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Page != nil {

		if m.GetPage() != 0 {

			if m.GetPage() < 1 {
				err := PaginationValidationError{
					field:  "Page",
					reason: "value must be greater than or equal to 1",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.PageSize != nil {

		if m.GetPageSize() != 0 {

			if m.GetPageSize() < 1 {
				err := PaginationValidationError{
					field:  "PageSize",
					reason: "value must be greater than or equal to 1",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Sort != nil {

		if _, ok := TypeSort_name[int32(m.GetSort())]; !ok {
			err := PaginationValidationError{
				field:  "Sort",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.SortBy != nil {
		// no validation rules for SortBy
	}

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}

// Validate checks the field values on FilterServer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterServer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterServerMultiError, or
// nil if none found.
func (m *FilterServer) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CreatedAtFrom != nil {
		// no validation rules for CreatedAtFrom
	}

	if m.CreatedAtTo != nil {
		// no validation rules for CreatedAtTo
	}

	if m.UpdatedAtFrom != nil {
		// no validation rules for UpdatedAtFrom
	}

	if m.UpdatedAtTo != nil {
		// no validation rules for UpdatedAtTo
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return FilterServerMultiError(errors)
	}

	return nil
}

// FilterServerMultiError is an error wrapping multiple validation errors
// returned by FilterServer.ValidateAll() if the designated constraints aren't met.
type FilterServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterServerMultiError) AllErrors() []error { return m }

// FilterServerValidationError is the validation error returned by
// FilterServer.Validate if the designated constraints aren't met.
type FilterServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterServerValidationError) ErrorName() string { return "FilterServerValidationError" }

// Error satisfies the builtin error interface
func (e FilterServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterServerValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for CreatedBy

	// no validation rules for UpdatedAt

	// no validation rules for UpdatedBy

	// no validation rules for Name

	if _, ok := ServerStatus_name[int32(m.GetStatus())]; !ok {
		err := ServerValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIpv4()); ip == nil || ip.To4() == nil {
		err := ServerValidationError{
			field:  "Ipv4",
			reason: "value must be a valid IPv4 address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on ListServerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServerRequestMultiError, or nil if none found.
func (m *ListServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Query != nil {
		// no validation rules for Query
	}

	if m.Filter != nil {

		if all {
			switch v := interface{}(m.GetFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServerRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServerRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServerRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServerRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServerRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServerRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServerRequestMultiError(errors)
	}

	return nil
}

// ListServerRequestMultiError is an error wrapping multiple validation errors
// returned by ListServerRequest.ValidateAll() if the designated constraints
// aren't met.
type ListServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServerRequestMultiError) AllErrors() []error { return m }

// ListServerRequestValidationError is the validation error returned by
// ListServerRequest.Validate if the designated constraints aren't met.
type ListServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServerRequestValidationError) ErrorName() string {
	return "ListServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServerRequestValidationError{}

// Validate checks the field values on ListServersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServersResponseMultiError, or nil if none found.
func (m *ListServersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServersResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServersResponseValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServersResponseValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListServersResponseMultiError(errors)
	}

	return nil
}

// ListServersResponseMultiError is an error wrapping multiple validation
// errors returned by ListServersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServersResponseMultiError) AllErrors() []error { return m }

// ListServersResponseValidationError is the validation error returned by
// ListServersResponse.Validate if the designated constraints aren't met.
type ListServersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServersResponseValidationError) ErrorName() string {
	return "ListServersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServersResponseValidationError{}

// Validate checks the field values on GetServerByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServerByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServerByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServerByNameRequestMultiError, or nil if none found.
func (m *GetServerByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServerByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetServerByNameRequestMultiError(errors)
	}

	return nil
}

// GetServerByNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetServerByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServerByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServerByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServerByNameRequestMultiError) AllErrors() []error { return m }

// GetServerByNameRequestValidationError is the validation error returned by
// GetServerByNameRequest.Validate if the designated constraints aren't met.
type GetServerByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServerByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServerByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServerByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServerByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServerByNameRequestValidationError) ErrorName() string {
	return "GetServerByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServerByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServerByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServerByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServerByNameRequestValidationError{}

// Validate checks the field values on GetServerByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServerByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServerByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServerByIdRequestMultiError, or nil if none found.
func (m *GetServerByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServerByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetServerByIdRequestMultiError(errors)
	}

	return nil
}

// GetServerByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetServerByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServerByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServerByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServerByIdRequestMultiError) AllErrors() []error { return m }

// GetServerByIdRequestValidationError is the validation error returned by
// GetServerByIdRequest.Validate if the designated constraints aren't met.
type GetServerByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServerByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServerByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServerByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServerByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServerByIdRequestValidationError) ErrorName() string {
	return "GetServerByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServerByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServerByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServerByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServerByIdRequestValidationError{}

// Validate checks the field values on CreateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServerRequestMultiError, or nil if none found.
func (m *CreateServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if _, ok := ServerStatus_name[int32(m.GetStatus())]; !ok {
		err := CreateServerRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIpv4()); ip == nil || ip.To4() == nil {
		err := CreateServerRequestValidationError{
			field:  "Ipv4",
			reason: "value must be a valid IPv4 address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateServerRequestMultiError(errors)
	}

	return nil
}

// CreateServerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServerRequestMultiError) AllErrors() []error { return m }

// CreateServerRequestValidationError is the validation error returned by
// CreateServerRequest.Validate if the designated constraints aren't met.
type CreateServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServerRequestValidationError) ErrorName() string {
	return "CreateServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServerRequestValidationError{}

// Validate checks the field values on UpdateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerRequestMultiError, or nil if none found.
func (m *UpdateServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if _, ok := ServerStatus_name[int32(m.GetStatus())]; !ok {
		err := UpdateServerRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIpv4()); ip == nil || ip.To4() == nil {
		err := UpdateServerRequestValidationError{
			field:  "Ipv4",
			reason: "value must be a valid IPv4 address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateServerRequestMultiError(errors)
	}

	return nil
}

// UpdateServerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerRequestMultiError) AllErrors() []error { return m }

// UpdateServerRequestValidationError is the validation error returned by
// UpdateServerRequest.Validate if the designated constraints aren't met.
type UpdateServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerRequestValidationError) ErrorName() string {
	return "UpdateServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerRequestValidationError{}

// Validate checks the field values on DeleteServerByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerByNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerByNameRequestMultiError, or nil if none found.
func (m *DeleteServerByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteServerByNameRequestMultiError(errors)
	}

	return nil
}

// DeleteServerByNameRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServerByNameRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteServerByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerByNameRequestMultiError) AllErrors() []error { return m }

// DeleteServerByNameRequestValidationError is the validation error returned by
// DeleteServerByNameRequest.Validate if the designated constraints aren't met.
type DeleteServerByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerByNameRequestValidationError) ErrorName() string {
	return "DeleteServerByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerByNameRequestValidationError{}

// Validate checks the field values on DeleteServerByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerByIdRequestMultiError, or nil if none found.
func (m *DeleteServerByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteServerByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteServerByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServerByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerByIdRequestMultiError) AllErrors() []error { return m }

// DeleteServerByIdRequestValidationError is the validation error returned by
// DeleteServerByIdRequest.Validate if the designated constraints aren't met.
type DeleteServerByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerByIdRequestValidationError) ErrorName() string {
	return "DeleteServerByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerByIdRequestValidationError{}

// Validate checks the field values on FileExport with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileExport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileExport with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileExportMultiError, or
// nil if none found.
func (m *FileExport) ValidateAll() error {
	return m.validate(true)
}

func (m *FileExport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	if len(errors) > 0 {
		return FileExportMultiError(errors)
	}

	return nil
}

// FileExportMultiError is an error wrapping multiple validation errors
// returned by FileExport.ValidateAll() if the designated constraints aren't met.
type FileExportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileExportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileExportMultiError) AllErrors() []error { return m }

// FileExportValidationError is the validation error returned by
// FileExport.Validate if the designated constraints aren't met.
type FileExportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileExportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileExportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileExportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileExportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileExportValidationError) ErrorName() string { return "FileExportValidationError" }

// Error satisfies the builtin error interface
func (e FileExportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileExport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileExportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileExportValidationError{}

// Validate checks the field values on ExportServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportServerRequestMultiError, or nil if none found.
func (m *ExportServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportServerRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportServerRequestValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportServerRequestValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Filter != nil {

		if all {
			switch v := interface{}(m.GetFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExportServerRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExportServerRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExportServerRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Pagination != nil {

		if all {
			switch v := interface{}(m.GetPagination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExportServerRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExportServerRequestValidationError{
						field:  "Pagination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExportServerRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExportServerRequestMultiError(errors)
	}

	return nil
}

// ExportServerRequestMultiError is an error wrapping multiple validation
// errors returned by ExportServerRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportServerRequestMultiError) AllErrors() []error { return m }

// ExportServerRequestValidationError is the validation error returned by
// ExportServerRequest.Validate if the designated constraints aren't met.
type ExportServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportServerRequestValidationError) ErrorName() string {
	return "ExportServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportServerRequestValidationError{}

// Validate checks the field values on ImportServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportServerRequestMultiError, or nil if none found.
func (m *ImportServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chunk

	if len(errors) > 0 {
		return ImportServerRequestMultiError(errors)
	}

	return nil
}

// ImportServerRequestMultiError is an error wrapping multiple validation
// errors returned by ImportServerRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportServerRequestMultiError) AllErrors() []error { return m }

// ImportServerRequestValidationError is the validation error returned by
// ImportServerRequest.Validate if the designated constraints aren't met.
type ImportServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportServerRequestValidationError) ErrorName() string {
	return "ImportServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportServerRequestValidationError{}

// Validate checks the field values on ImportServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportServerResponseMultiError, or nil if none found.
func (m *ImportServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumServerImported

	for idx, item := range m.GetServerImported() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportServerResponseValidationError{
						field:  fmt.Sprintf("ServerImported[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportServerResponseValidationError{
						field:  fmt.Sprintf("ServerImported[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportServerResponseValidationError{
					field:  fmt.Sprintf("ServerImported[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NumServerFail

	for idx, item := range m.GetServerFail() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportServerResponseValidationError{
						field:  fmt.Sprintf("ServerFail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportServerResponseValidationError{
						field:  fmt.Sprintf("ServerFail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportServerResponseValidationError{
					field:  fmt.Sprintf("ServerFail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportServerResponseMultiError(errors)
	}

	return nil
}

// ImportServerResponseMultiError is an error wrapping multiple validation
// errors returned by ImportServerResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportServerResponseMultiError) AllErrors() []error { return m }

// ImportServerResponseValidationError is the validation error returned by
// ImportServerResponse.Validate if the designated constraints aren't met.
type ImportServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportServerResponseValidationError) ErrorName() string {
	return "ImportServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportServerResponseValidationError{}
