syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "github.com/nguyentrunghieu15/vcs-common-prj/apu/server";

enum ServerStatus {
    STATUSNONE = 0;
    ON = 1;
    OFF= 2;
}

enum TypeSort {
    NONE =0;
    ASC = 1;
    DESC= 2;
}

message Filter {
    optional int64 limit = 2 [(validate.rules).int64 = {gte:1 , ignore_empty:true}];
    optional int64 page = 3 [(validate.rules).int64 = {gte:1 , ignore_empty:true}];
    optional int64 page_size = 4 [(validate.rules).int64 = {gte:1 , ignore_empty:true}];
    optional TypeSort sort = 5 [(validate.rules).enum.defined_only = true];
    optional string sort_by = 6;
}

message Server{
    int64 id = 1;
    string created_at = 2;
    int64 created_by = 3;
    string updated_at = 4; 
    int64 updated_by =5;
    string name =6 [(google.api.field_behavior) = REQUIRED];
    ServerStatus status =7 [(validate.rules).enum.defined_only = true];
    string ipv4 =8 [(google.api.field_behavior) = REQUIRED,(validate.rules).string = {ipv4: true}];
}

message ListServerRequest {
    optional Filter filter = 1;
}
  
message ListServersResponse {
    // The field name should match the noun "Server" in the method name.
    // There will be a maximum number of items returned based on the page_size field in the request.
    repeated Server servers = 1;
}
  
message GetServerByNameRequest {
    // The field will contain name of the resource requested.
    string name = 1 [(google.api.field_behavior) = REQUIRED];;
}

message GetServerByIdRequest {
    // The field will contain name of the resource requested.
    int64 id = 1 [(google.api.field_behavior) = REQUIRED];;
}
  
message CreateServerRequest {
    // The Server resource to create.
    // The field name should match the Noun in the method name.
    string name =6 [(google.api.field_behavior) = REQUIRED];;
    ServerStatus status =7 [(validate.rules).enum.defined_only = true];
    string ipv4 =8 [(validate.rules).string = {ipv4: true}];
  }
  
  message UpdateServerRequest {
    // The Server resource which replaces the resource on the server.
    int64 id = 1;
    string name =6;
    ServerStatus status =7 [(validate.rules).enum.defined_only = true];
    string ipv4 =8 [(validate.rules).string = {ipv4: true}];
  }
  
message DeleteServerByNameRequest {
    // The resource name of the Server to be deleted.
    string name = 1 [(google.api.field_behavior) = REQUIRED];;
}

message DeleteServerByIdRequest {
    // The resource id of the Server to be deleted.
    int64 id = 1 [(google.api.field_behavior) = REQUIRED];;
}

message ExportServerRequest {
    optional Filter filter = 1;
}

message ImportServerRequest {
    Server server = 1 [(validate.rules).message.required = true];
}

message ImportServerResponse {
    int64 num_server_imported = 1;
    repeated Server server_imported = 2;
    int64 num_server_fail = 3;
    repeated Server server_fail = 4;
}

// Generated according to https://cloud.google.com/apis/design/standard_methods
service ServerService {
  rpc ListServers(ListServerRequest) returns (ListServersResponse) {
    option (google.api.http) = {
      get: "/api/v1/server"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Get list user"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc GetServerByName(GetServerByNameRequest) returns (Server) {
    option (google.api.http) = {
      get: "/api/v1/server/by/name"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Get server by name"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc GetServerById(GetServerByIdRequest) returns (Server) {
    option (google.api.http) = {
      get: "/api/v1/server/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Get server by id"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc CreateServer(CreateServerRequest) returns (Server) {
    option (google.api.http) = {
      post: "/api/v1/server"
      body:"*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Create server"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "409",
          value: {
            description: "Already exists";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc UpdateServer(UpdateServerRequest) returns (Server) {
    option (google.api.http) = {
      patch: "/api/v1/server/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Update server"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc DeleteServerByName(DeleteServerByNameRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/server"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Delete server by name"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc DeleteServerById(DeleteServerByIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/server/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Delete server by id"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "404",
          value: {
            description: "Not found";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc ExportServer(ExportServerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/server/export"
      body:"*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Export server"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }

  rpc ImportServer(stream ImportServerRequest) returns (ImportServerResponse) {
    option (google.api.http) = {
      post: "/api/v1/server/import"
      body:"*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary:"Import server"
      responses:[
        {
          key: "401",
          value: {
            description: "Unauthorized";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "400",
          value: {
            description: "Bad request";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "403",
          value: {
            description: "Forbidden, permission dennied";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        },
        {
          key: "500",
          value: {
            description: "Internal Server";
            schema: {
              json_schema: {ref: "#/definitions/rpcStatus"}
            }
          }
        }
      ],
      parameters:{
        headers:[
          {
            name:"Authorization",
            type:STRING,
            required:true
          }
        ]
      }
    };
  }
}

